AWSTemplateFormatVersion: '2010-09-09'
Description: Route53 HandsOn

Mappings:
  StackConfig:
    VPC:
      CIDR: 10.0.1.0/24
    PublicSubnet:
      CIDR: 10.0.1.64/26
    PrivateSubnet:
      CIDR: 10.0.1.128/26
    PrivateSubnet2:
      CIDR: 10.0.1.0/26
    ClientVPC:
      CIDR: 10.0.0.0/24 
    ResolvVPC:
      CIDR: 10.0.2.0/24

Parameters:
  Ec2ImageId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
#---vpc
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !FindInMap [ StackConfig, VPC, CIDR ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags: 
        - Key: Name
          Value: ccnavi_vpc

#---Public RoteTable, Route, Subnet, Assosiation
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ccnavi_vpc_publicroutetable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !FindInMap [ StackConfig, PublicSubnet, CIDR ]
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: ccnavi_vpc_publicsubnet

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

#---Private RoteTable, Route, Subnet, Assosiation
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ccnavi_vpc_privateroutetable

  PrivateRouteClient:
    Type: AWS::EC2::Route
    DependsOn: TGWvpcAttach
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !FindInMap [ StackConfig, ClientVPC, CIDR ]
      TransitGatewayId: !ImportValue TGW

  PrivateRouteResolv:
    Type: AWS::EC2::Route
    DependsOn: TGWvpcAttach
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !FindInMap [ StackConfig, ResolvVPC, CIDR ]
      TransitGatewayId: !ImportValue TGW

  PrivateRouteNAT:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: !FindInMap [ StackConfig, PrivateSubnet, CIDR ]
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: ccnavi_vpc_privatesubnet

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

#---Private RoteTable2, Route2, Subnet2, Assosiation2
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ccnavi_vpc_privateroutetable2

  PrivateRouteClient2:
    Type: AWS::EC2::Route
    DependsOn: TGWvpcAttach
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: !FindInMap [ StackConfig, ClientVPC, CIDR ]
      TransitGatewayId: !ImportValue TGW

  PrivateRouteResolv2:
    Type: AWS::EC2::Route
    DependsOn: TGWvpcAttach
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: !FindInMap [ StackConfig, ResolvVPC, CIDR ]
      TransitGatewayId: !ImportValue TGW

  PrivateRouteNAT2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}d"
      CidrBlock: !FindInMap [ StackConfig, PrivateSubnet2, CIDR ]
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: ccnavi_vpc_privatesubnet2

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

#---IGW,IGW Attach
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: ccnavi_vpc_igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

#---NAT
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NATGatewayCEIP.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet
      Tags: 
        - Key: Name
          Value: ccnavi_vpc_nat

#---NATGateway For EIP Create
  NATGatewayCEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

#---TGWvpcAttach
  TGWvpcAttach:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties: 
      SubnetIds: 
        - !Ref PrivateSubnet
        - !Ref PrivateSubnet2
      Tags: 
        - Key: Name
          Value: TGWccnavivpcAttach
      TransitGatewayId: !ImportValue TGW
      VpcId: !Ref VPC

#---InstanceProfile, Role
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /
      RoleName: ArrowSSMRole2

  InstancePro:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: InstancePro2
      Path: /
      Roles: 
        - !Ref IAMRole

#---EC2
  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref Ec2ImageId
      IamInstanceProfile: !Ref InstancePro
      InstanceType: "t2.micro"
      AvailabilityZone: !Sub "${AWS::Region}c"
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds: 
        - !Ref SecurityGroup
      Tags: 
        - Key: "Name"
          Value: "bind-server"

#---SG
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Private Subnet ccnavi SecurityGroup"
      GroupName: "test-ccnavi-sg"
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        -  
          CidrIp: "0.0.0.0/0"
          Description: "allow ssh"
          FromPort: 22
          IpProtocol: "tcp"
          ToPort: 22
        -
          CidrIp: "0.0.0.0/0"
          Description: "allow icmp"
          FromPort: 8
          IpProtocol: "icmp"
          ToPort: -1
        -
          CidrIp: "0.0.0.0/0"
          Description: "allow udp"
          FromPort: 33523
          IpProtocol: "udp"
          ToPort: 33523
        -
          CidrIp: "0.0.0.0/0"
          Description: "allow udp"
          FromPort: "53"
          IpProtocol: "udp"
          ToPort: "53"
        -
          CidrIp: "0.0.0.0/0"
          Description: "allow tcp"
          FromPort: "53"
          IpProtocol: "tcp"
          ToPort: "53"     

#---Route53 Endpoint, Route53
  Route53InboundEndpoint:
    Type: AWS::Route53Resolver::ResolverEndpoint
    DependsOn: VPC
    Properties: 
      Direction: INBOUND
      IpAddresses: 
        - SubnetId: !Ref PrivateSubnet
        - SubnetId: !Ref PrivateSubnet2
      Name: ccnavi_Route53_Inbound_Endpoint
      SecurityGroupIds: 
        - !Ref SecurityGroup
      Tags: 
        - Key: Name
          Value: ccnavi_Route53_Inbound_Endpoint

  PrivateHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: aws.ccnavi.co.jp
      HostedZoneConfig:
        Comment: My Private Domain
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: !Sub "${AWS::Region}"

  FirstServerRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: 'test.aws.ccnavi.co.jp.'
      Type: A
      TTL: "300"
      HostedZoneId: !Ref PrivateHostedZone
      ResourceRecords: 
        - '10.0.1.140'